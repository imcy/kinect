
// opentestDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "opentest.h"
#include "opentestDlg.h"
#include "afxdialogex.h"
#include <string>
#include <math.h>

SOCKET listen_sock;
SOCKET sock;

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CopentestDlg 对话框



CopentestDlg::CopentestDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_OPENTEST_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CopentestDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CopentestDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_TIMER()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDOK, &CopentestDlg::OnBnClickedOk)
	ON_BN_CLICKED(IDC_BUTTON1, &CopentestDlg::OnBnClickedButton1)
	ON_BN_CLICKED(IDC_BUTTON2, &CopentestDlg::OnBnClickedButton2)
	ON_BN_CLICKED(IDC_BUTTON4, &CopentestDlg::OnBnClickedButton4)
	ON_BN_CLICKED(IDC_BUTTON5, &CopentestDlg::OnBnClickedButton5)
	ON_BN_CLICKED(IDC_ScreenShot, &CopentestDlg::OnBnClickedScreenshot)
	ON_BN_CLICKED(IDC_ANALY, &CopentestDlg::OnBnClickedAnaly)
	ON_BN_CLICKED(IDC_RESET, &CopentestDlg::OnBnClickedReset)
	ON_BN_CLICKED(IDC_CONNECT, &CopentestDlg::OnBnClickedConnect)
	ON_BN_CLICKED(IDC_REMOTE, &CopentestDlg::OnBnClickedRemote)
END_MESSAGE_MAP()


// CopentestDlg 消息处理程序

BOOL CopentestDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码
	count = 0;
	cvNamedWindow("view", CV_WINDOW_AUTOSIZE);
	cvNamedWindow("depth", CV_WINDOW_AUTOSIZE);
	HWND hWnd = (HWND)cvGetWindowHandle("view");
	HWND hParent = ::GetParent(hWnd);
	::SetParent(hWnd, GetDlgItem(IDC_STATIC)->m_hWnd);
	::ShowWindow(hParent, SW_HIDE);//隐藏父窗口

	HWND hWndDept = (HWND)cvGetWindowHandle("depth");
	HWND hParentDept = ::GetParent(hWndDept);
	::SetParent(hWndDept, GetDlgItem(IDC_Dept)->m_hWnd);
	::ShowWindow(hParentDept, SW_HIDE);//隐藏父窗口
	/*初始化编辑框*/
	pEdit = (CEdit*)GetDlgItem(IDC_EDIT1);
	int nLength = pEdit->GetWindowTextLength();
	//选定当前文本的末端  
	pEdit->SetSel(nLength, nLength);
	colorImagePath = "./images/pcd000r.png"; //初始化截图地址
	imageCut = NULL; //初始化原始图像

	image.create(480, 640, CV_8UC3);
	depthImage.create(480, 640, CV_8UC1);
	//1、初始化NUI   
	hr = NuiInitialize(NUI_INITIALIZE_FLAG_USES_COLOR | NUI_INITIALIZE_FLAG_USES_DEPTH); //初始化彩色和深度图像
	if (FAILED(hr))
	{
		//追加文本  
		pEdit->ReplaceSel(_T("打开kinect失败,不能使用kinect读取图像\r\n"));
	}
	else
	{
		//追加文本  
		pEdit->ReplaceSel(_T("打开kinect成功\r\n"));
	}

	AfxBeginThread(&Server_Th, 0); //初始化socket
	send_edit = (CEdit *)GetDlgItem(IDC_ESEND);
	
	send_edit->SetFocus();

	char name[80];
	CString IP;
	hostent * pHost;
	WSADATA wsData;
	::WSAStartup(MAKEWORD(2, 2), &wsData);
	//获得主机名  
	if (gethostname(name, sizeof(name)))
	{
		pEdit->ReplaceSel(_T("无法获取本机地址"));
		return TRUE;
	}

	pHost = gethostbyname(name);//获得主机结构  
	IP = inet_ntoa(*(in_addr *)pHost->h_addr);
	pEdit->ReplaceSel(_T("本机地址")+IP+ "\r\n");
	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CopentestDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CopentestDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CopentestDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CopentestDlg::OnBnClickedOk()
{
	
	KillTimer(1);
	KillTimer(2);
	KillTimer(3);
	/*if (SUCCEEDED(hr)) {
		NuiShutdown();
	}*/
	return;
}

void CopentestDlg::DrawPicToHDC(IplImage * img, UINT ID)
{
	CDC *pDC = GetDlgItem(ID)->GetDC();
	HDC hDC = pDC->GetSafeHdc();
	CRect rect;
	GetDlgItem(ID)->GetClientRect(&rect);
	CvvImage cimg;
	cimg.CopyOf(img); // 复制图片
	cimg.DrawToHDC(hDC, &rect); // 将图片绘制到显示控件的指定区域内
	ReleaseDC(pDC);
}

void CopentestDlg::OnBnClickedButton1()
{
	// TODO: 在此添加控件通知处理程序代码	
	if (imageCut) cvReleaseImage(&imageCut);
	imageCut = cvLoadImage(colorImagePath.c_str(), 1); //显示图片
	DrawPicToHDC(imageCut, IDC_Cut);
	pEdit->ReplaceSel(_T("已打开截图图片\r\n"));
}


void CopentestDlg::OnBnClickedButton2()
{
	// 点击打开电脑自带摄像头
	pEdit->ReplaceSel(_T("打开自带摄像头\r\n"));
	CRect rect;
	CWnd *pWnd = GetDlgItem(IDC_STATIC);
	pWnd->GetClientRect(&rect); //获取控件大小
	x = rect.Width();
	y = rect.Height();
	capture = 0;
	//cv::VideoCapture capture(0);
	SetTimer(1, 25, NULL); //定时器，定时时间和帧率一致
}
void CopentestDlg::CaptureVideo()
{
	cv::Mat frame;
	capture >> frame;
	cv::Mat dst;
	cv::resize(frame, dst, cv::Size(x, y), 0, 0, 1);
	cv::imshow("view", dst);
}


void CopentestDlg::OnTimer(UINT_PTR nIDEvent)
{
	if (1 == nIDEvent) {
		CaptureVideo(); //捕捉自带摄像头
	}
	else if (2 == nIDEvent) {
		CaptureKinectVideo(); //捕捉彩色摄像头
	}
	else if (3 == nIDEvent) {
		CaptureKinectDepthVideo(); //捕捉深度摄像头
	}
	CDialog::OnTimer(nIDEvent);
}

void CopentestDlg::OnBnClickedButton4()
{
	// TODO: 在此添加控件通知处理程序代码
	//2、定义事件句柄   
	//创建读取下一帧的信号事件句柄，控制KINECT是否可以开始读取下一帧数据  
	nextColorFrameEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
	colorStreamHandle = NULL; //保存图像数据流的句柄，用以提取数据   
							  //3、打开KINECT设备的彩色图信息通道，并用colorStreamHandle保存该流的句柄，以便于以后读取  
	hr = NuiImageStreamOpen(NUI_IMAGE_TYPE_COLOR, NUI_IMAGE_RESOLUTION_640x480,
		0, 2, nextColorFrameEvent, &colorStreamHandle);
	if (FAILED(hr))//判断是否提取正确   
	{
		AfxMessageBox(_T("读取错误"));
		NuiShutdown();
		return;
	}
	CRect rect;
	CWnd *pWnd = GetDlgItem(IDC_STATIC);
	pWnd->GetClientRect(&rect); //获取控件大小
	x = rect.Width();
	y = rect.Height();
	//4、开始读取彩色图数据   
	//追加文本  
	pEdit->ReplaceSel(_T("开始读取kinect彩色摄像头数据\r\n"));
	SetTimer(2, 25, NULL); //定时器，定时时间和帧率一致
}


void CopentestDlg::OnBnClickedButton5()
{
	// 打开深度摄像头
	//2、定义事件句柄   
	//创建读取下一帧的信号事件句柄，控制KINECT是否可以开始读取下一帧数据  
	nextDepthFrameEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
	//深度图像事件句柄
	depthStreamHandle = NULL;
	//实例打开数据流，这里NUI_IMAGE_TYPE_DEPTH表示深度图像
	hr = NuiImageStreamOpen(NUI_IMAGE_TYPE_DEPTH, NUI_IMAGE_RESOLUTION_640x480, 0, 2, nextDepthFrameEvent, &depthStreamHandle);
	if (FAILED(hr))//判断是否提取正确   
	{
		AfxMessageBox(_T("读取深度错误"));
		NuiShutdown();
		return;
	}
	pEdit->ReplaceSel(_T("开始读取kinect深度摄像头数据\r\n"));
	CRect rect;
	CWnd *pWnd = GetDlgItem(IDC_Dept);
	pWnd->GetClientRect(&rect); //获取控件大小
	xd = rect.Width();
	yd = rect.Height();
	SetTimer(3, 25, NULL); //定时器，定时时间和帧率一致
}
void CopentestDlg::CaptureKinectVideo()
{

	const NUI_IMAGE_FRAME * pImageFrame = NULL;
	//4.1、无限等待新的数据，等到后返回  
	if (WaitForSingleObject(nextColorFrameEvent, INFINITE) == 0)
	{
		//4.2、从刚才打开数据流的流句柄中得到该帧数据，读取到的数据地址存于pImageFrame  
		hr = NuiImageStreamGetNextFrame(colorStreamHandle, 0, &pImageFrame);
		if (FAILED(hr))
		{
			AfxMessageBox(_T("不能获取彩色图像"));
			NuiShutdown();
			return;
		}

		INuiFrameTexture * pTexture = pImageFrame->pFrameTexture;
		NUI_LOCKED_RECT LockedRect;

		//4.3、提取数据帧到LockedRect，它包括两个数据对象：pitch每行字节数，pBits第一个字节地址  
		//并锁定数据，这样当我们读数据的时候，kinect就不会去修改它  
		pTexture->LockRect(0, &LockedRect, NULL, 0);
		//4.4、确认获得的数据是否有效  
		if (LockedRect.Pitch != 0)
		{
			//4.5、将数据转换为OpenCV的Mat格式  
			for (int i = 0; i < image.rows; i++)
			{
				uchar *ptr = image.ptr<uchar>(i);  //第i行的指针  

												   //每个字节代表一个颜色信息，直接使用uchar  
				uchar *pBuffer = (uchar*)(LockedRect.pBits) + i * LockedRect.Pitch;
				for (int j = 0; j < image.cols; j++)
				{
					ptr[3 * j] = pBuffer[4 * j];  //内部数据是4个字节，0-1-2是BGR，第4个现在未使用   
					ptr[3 * j + 1] = pBuffer[4 * j + 1];
					ptr[3 * j + 2] = pBuffer[4 * j + 2];
				}
			}
			cv::Mat dst;
			cv::resize(image, dst, cv::Size(x, y), 0, 0, 1);
			cv::imshow("view", dst);
		}
		else
		{
			AfxMessageBox(_T("获取数据无效"));
		}
		//5、这帧已经处理完了，所以将其解锁  
		pTexture->UnlockRect(0);
		//6、释放本帧数据，准备迎接下一帧   
		NuiImageStreamReleaseFrame(colorStreamHandle, pImageFrame);
	}
}

void CopentestDlg::CaptureKinectDepthVideo()
{
	const NUI_IMAGE_FRAME *pImageFrame_depth = NULL;
	//深度图像的处理
	if (WaitForSingleObject(nextDepthFrameEvent, INFINITE) == 0)
	{
		hr = NuiImageStreamGetNextFrame(depthStreamHandle, 0, &pImageFrame_depth);
		if (FAILED(hr))
		{
			AfxMessageBox(_T("不能读取深度图像"));
			NuiShutdown();
			return ;
		}
		INuiFrameTexture * pTexture = pImageFrame_depth->pFrameTexture;
		NUI_LOCKED_RECT LockedRect;
		//7.3、提取数据帧到LockedRect，它包括两个数据对象：pitch每行字节数，pBits第一个字节地址  
		//并锁定数据，这样当我们读数据的时候，kinect就不会去修改它  
		pTexture->LockRect(0, &LockedRect, NULL, 0);
		//7.4、确认获得的数据是否有效  
		if (LockedRect.Pitch != 0)
		{
			//7.5、将数据转换为OpenCV的Mat格式  
			for (int i = 0; i<depthImage.rows; i++)
			{
				uchar *ptr = depthImage.ptr(i);  //第i行的指针  
												 //每个字节代表一个颜色信息，直接使用uchar  
				uchar *pBuffer = (uchar*)(LockedRect.pBits) + i * LockedRect.Pitch;
				USHORT *pBufferRun = (USHORT *)pBuffer;//这里需要转换，因为每个深度数据是2个字节，应将BYTE转成USHORT  
				for (int j = 0; j<depthImage.cols; j++)
				{
					ptr[j] = 255 - (BYTE)(256 * pBufferRun[j] / 0x1fff); //将数据归一化处理*  
				}
			}
			cv::Mat dst;
			cv::resize(depthImage, dst, cv::Size(xd, yd), 0, 0, 1);
			cv::imshow("depth", dst);

		}
		else
		{
			AfxMessageBox(_T("获取数据无效"));
		}
	//8、这帧已经处理完了，所以将其解锁  
	pTexture->UnlockRect(0);
	//9、释放本帧数据，准备迎接下一帧  
	NuiImageStreamReleaseFrame(depthStreamHandle, pImageFrame_depth);
	}
}


void CopentestDlg::OnBnClickedScreenshot()
{
	if (FAILED(hr))
	{
		AfxMessageBox(_T("未打开kinect，不能截图!"));
		return;
	}
	std::string basePath = "./images/";
	std::string colorPathPrefix = "Color";
	std::string depthPathPrefix = "Depth";
	std::string commonPathSuffix = ".png";
	std::stringstream ss;
	ss << basePath <<"pcd00"<< count << "r" << commonPathSuffix;
	colorImagePath = ss.str();
	imwrite(colorImagePath, image);
	/*
	std::stringstream ssd;
	ssd << basePath<<count<<"-" << depthPathPrefix << commonPathSuffix;
	std::string depthImagePath = ssd.str();
	imwrite(depthImagePath, depthImage);*/
	count++;
	pEdit->ReplaceSel(_T("截图成功,已保存到images文件夹中\r\n"));
}


void CopentestDlg::OnBnClickedAnaly()
{
	CString x,y,angle,width;
	float xRaw[4], yRaw[4];
	float xNew[4], yNew[4];
	float height = 33;
	if (imageCut==NULL) {
		AfxMessageBox(_T("未打开图片,不能分析"));
		return;
	}
	//此处之后需要单独封装函数
	GetDlgItem(IDC_EX)->GetWindowText(x);
	GetDlgItem(IDC_EY)->GetWindowText(y);
	GetDlgItem(IDC_ANGLE)->GetWindowText(angle);
	GetDlgItem(IDC_WIDTH)->GetWindowText(width);
	float xf = _tstof(x); //将Cstring转成float类型
	float yf = _tstof(y);
	float widthf= _tstof(width);
	float anglef= _tstof(angle);

	xRaw[1] = xf - 0.5*widthf;
	yRaw[1] = yf - 0.5*height;

	xRaw[0] = xf + 0.5*widthf;
	yRaw[0] = yRaw[1];
	
	xRaw[2] = xRaw[1];
	yRaw[2] = yf + 0.5*height;
	
	xRaw[3] = xRaw[0];
	yRaw[3] = yRaw[2];
	
	float anglePi = -anglef*pi / 180.0;
	float cosA = cos(anglePi);
	float sinA = sin(anglePi);

	xNew[0] = (xRaw[0] - xf)*cosA - (yRaw[0] - yf)*sinA + xf;
	yNew[0] = (xRaw[0] - xf)*sinA + (yRaw[0] - yf)*cosA + yf;

	xNew[1] = (xRaw[1] - xf)*cosA - (yRaw[1] - yf)*sinA + xf;
	yNew[1] = (xRaw[1] - xf)*sinA + (yRaw[1] - yf)*cosA + yf;

	xNew[2] = (xRaw[2] - xf)*cosA - (yRaw[2] - yf)*sinA + xf;
	yNew[2] = (xRaw[2] - xf)*sinA + (yRaw[2] - yf)*cosA + yf;

	xNew[3] = (xRaw[3] - xf)*cosA - (yRaw[3] - yf)*sinA + xf;
	yNew[3] = (xRaw[3] - xf)*sinA + (yRaw[3] - yf)*cosA + yf;
	
	cvLine(imageCut, cvPoint(xNew[0], yNew[0]), cvPoint(xNew[1], yNew[1]), cvScalar(0, 0, 255), 3);
	cvLine(imageCut, cvPoint(xNew[1], yNew[1]), cvPoint(xNew[2], yNew[2]), cvScalar(255, 0, 0), 3);
	cvLine(imageCut, cvPoint(xNew[2], yNew[2]), cvPoint(xNew[3], yNew[3]), cvScalar(0, 0, 255), 3);
	cvLine(imageCut, cvPoint(xNew[0], yNew[0]), cvPoint(xNew[3], yNew[3]), cvScalar(255, 0, 0), 3);

	DrawPicToHDC(imageCut, IDC_Cut);
	pEdit->ReplaceSel(_T("图片已修改\r\n"));
}


void CopentestDlg::OnBnClickedReset()
{
	OnBnClickedButton1();
	GetDlgItem(IDC_EX)->SetWindowText(_T(""));
	GetDlgItem(IDC_EY)->SetWindowText(_T(""));
	GetDlgItem(IDC_ANGLE)->SetWindowText(_T(""));
	GetDlgItem(IDC_WIDTH)->SetWindowText(_T(""));
	pEdit->ReplaceSel(_T("图片已复位\r\n"));
}

void CopentestDlg::OnBnClickedConnect()
{
	CString str;
	char * msg;
	send_edit->GetWindowText(str);
	USES_CONVERSION; //cstring 转char*
	msg = T2A(str);
	if (send(sock, msg, strlen(msg), 0) == SOCKET_ERROR)
	{
		pEdit->ReplaceSel(_T("发送失败\r\n"));
	}

	else if (str == "")
	{
		AfxMessageBox(_T("请输入信息"));
	}
	else
	{
		pEdit->ReplaceSel(_T("server:") + str + _T("\r\n"));//消息上屏，清空输入，并重获焦点  
		send_edit->SetWindowText(_T(""));
		send_edit->SetFocus();
	}
}
/*
 socket线程初始化
*/
UINT Server_Th(LPVOID p)
{
	WSADATA wsaData;

	WORD wVersion;

	wVersion = MAKEWORD(2, 2);

	WSAStartup(wVersion, &wsaData);

	SOCKADDR_IN local_addr;
	SOCKADDR_IN client_addr;
	int iaddrSize = sizeof(SOCKADDR_IN);
	int res;
	char msg[1024];
	CopentestDlg * dlg = (CopentestDlg *)AfxGetApp()->GetMainWnd();
	local_addr.sin_family = AF_INET;
	local_addr.sin_port = htons(5150);
	local_addr.sin_addr.s_addr = htonl(INADDR_ANY);

	if ((listen_sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == INVALID_SOCKET)
	{
		
		dlg->pEdit->ReplaceSel(_T("创建监听失败\r\n"));
	}
	if (bind(listen_sock, (struct sockaddr*) &local_addr, sizeof(SOCKADDR_IN)))
	{
		dlg->pEdit->ReplaceSel(_T("绑定错误\r\n"));
	}
	listen(listen_sock, 1);
	if ((sock = accept(listen_sock, (struct sockaddr *)&client_addr, &iaddrSize)) == INVALID_SOCKET)
	{
		dlg->pEdit->ReplaceSel(_T("accept 失败\r\n"));
	}
	else
	{
		CString port;
		int temp = ntohs(client_addr.sin_port);
		port.Format(_T("%d"), temp);
		//port.Format("%d", int(ntohs(client_addr.sin_port)));
		dlg->pEdit->ReplaceSel(_T("已连接来自：") + CString(inet_ntoa(client_addr.sin_addr)) + _T("  端口：") + port+"\r\n");
	}

	//接收数据  
	while (1)
	{
		if ((res = recv(sock, msg, 1024, 0)) == -1)
		{
			dlg->pEdit->ReplaceSel(_T("失去连接\r\n"));
			break;
		}
		else
		{
			msg[res] = '\0';
			dlg->pEdit->ReplaceSel(_T("client:" + CString(msg)) + "\r\n");
		}
	}
	return 0;
}

/*
*	发送截图
*/

void CopentestDlg::OnBnClickedRemote()
{
	HANDLE hFile;
	hFile = CreateFile(CString(colorImagePath.c_str()), GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	unsigned long long file_size = 0;
	file_size = GetFileSize(hFile, NULL);
	char buffer[BUFFER_SIZE];
	const char * str= "准备发送图片";
	//发送准备发送命令
	memset(buffer, 0, BUFFER_SIZE);
	strncpy(buffer, str, strlen(str));
	if (send(sock, buffer, strlen(str), 0) == SOCKET_ERROR)
	{
		pEdit->ReplaceSel(_T("发送失败\r\n"));
		return;
	}
	else
	{
		pEdit->ReplaceSel(_T("server:准备发送图片\r\n"));//消息上屏，清空输入，并重获焦点 
	}
	//发送图片长度
	memset(buffer, 0, sizeof(buffer));
	memcpy(buffer, &file_size, sizeof(file_size) + 1);
	if (send(sock, buffer, sizeof(file_size) + 1, 0) == SOCKET_ERROR)
	{
		pEdit->ReplaceSel(_T("发送失败\r\n"));
		return;
	}
	else
	{
		pEdit->ReplaceSel(_T("开始发送图片\r\n"));//消息上屏，清空输入，并重获焦点 
	}
	memset(buffer, 0, sizeof(buffer));
	DWORD dwNumberOfBytesRead;
	do
	{
		::ReadFile(hFile, buffer, sizeof(buffer), &dwNumberOfBytesRead, NULL);
		::send(sock, buffer, dwNumberOfBytesRead, 0);
	} while (dwNumberOfBytesRead);
	CloseHandle(hFile);
	pEdit->ReplaceSel(_T("成功发送图片\r\n"));
}
